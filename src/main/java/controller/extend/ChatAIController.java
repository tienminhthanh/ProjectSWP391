package controller.extend;

import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Scanner;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import jakarta.json.Json;
import jakarta.json.JsonArray;
import jakarta.json.JsonObject;
import jakarta.json.JsonReader;
import jakarta.json.JsonWriter;

@WebServlet("/ChatServletAI")
public class ChatAIController extends HttpServlet {
//AIzaSyAz8Jeb-L8TI_DZw-x7n-OKVs6sQN2ZOPQ
    //private static final String API_KEY = "AIzaSyAdr95aaOBJifRSD9qEMCH8AHeCu9rGYg8"; // üî¥ Replace with your API key

    private static final String API_KEY = "AIzaSyAz8Jeb-L8TI_DZw-x7n-OKVs6sQN2ZOPQ";
    private static final String GEMINI_API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=" + API_KEY;
    private static final String SYSTEM_PROMPT = "B·∫°n l√† m·ªôt nh√¢n vi√™n t∆∞ v·∫•n s√°ch chuy√™n nghi·ªáp t√™n l√† Wibooks AI, chuy√™n h·ªó tr·ª£ v√† gi·∫£i ƒë√°p c√°c th·∫Øc m·∫Øc li√™n quan ƒë·∫øn s√°ch, bao g·ªìm n·ªôi dung truy·ªán, nh√¢n v·∫≠t trong s√°ch ho·∫∑c truy·ªán tranh, c·ªët truy·ªán, "
            + "c≈©ng nh∆∞ th√¥ng tin v·ªÅ t√°c gi·∫£ c·ªßa nh·ªØng cu·ªën s√°ch ho·∫∑c b·ªô truy·ªán ƒë√≥. "
            + "N·∫øu b·∫°n c√≥ c√¢u h·ªèi nh∆∞ 'Conan l√† ai?', 'C·ªët truy·ªán c·ªßa One Piece nh∆∞ th·∫ø n√†o?', hay 'T√°c gi·∫£ c·ªßa Harry Potter l√† ai?', h√£y s·∫µn l√≤ng gi√∫p ng∆∞·ªùi t√¨m c√¢u tr·∫£ l·ªùi.\n"
            + "Tuy nhi√™n, n·∫øu c√¢u h·ªèi kh√¥ng li√™n quan ƒë·∫øn s√°ch, truy·ªán tranh ho·∫∑c c√°c nh√¢n v·∫≠t trong ƒë√≥, ch·∫≥ng h·∫°n nh∆∞ 'T√≤a nh√† cao nh·∫•t th·∫ø gi·ªõi l√† g√¨?', 'C√°ch n·∫•u m√≥n ƒÉn n√†y nh∆∞ th·∫ø n√†o?' hay 'S·ª± ki·ªán th·ªÉ thao n√†o s·∫Øp di·ªÖn ra?', t√¥i xin ph√©p kh√¥ng tr·∫£ l·ªùi. "
            + "Mong b·∫°n h√£y ƒë·∫∑t nh·ªØng c√¢u h·ªèi li√™n quan ƒë·∫øn s√°ch v√† truy·ªán ƒë·ªÉ t√¥i c√≥ th·ªÉ t∆∞  m·ªôt c√°ch t·ªët nh·∫•t. V√† t√¥i s·∫Ω tr·∫£ l·ªùi b·∫°n th√†nh m·ªôt ƒëo·∫°n vƒÉn ch·ª© kh√¥ng tr√¨nh b√†y theo ki·ªÉu li·ªát k√™ s·ª≠ dung  d·∫•u *";

    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType("application/json");
        response.setCharacterEncoding("UTF-8");
        PrintWriter out = response.getWriter();

        // Receive user input from JSP
        String userMessage = request.getParameter("message");
        if (userMessage == null || userMessage.trim().isEmpty()) {
            out.write("{\"error\": \"Message is empty\"}");
            return;
        }

        // Retrieve or initialize AiSession for conversation history
        HttpSession session = request.getSession();
        String previousUserMessage = (String) session.getAttribute("AiSession_UserMessage");
        String previousAiResponse = (String) session.getAttribute("AiSession_AiResponse");

        if (previousUserMessage == null || previousAiResponse == null) {
            previousUserMessage = "";
            previousAiResponse = "";
        }

        // Introduce a delay of 1 seconds before sending the message to AI
        try {
            Thread.sleep(1000);  // Sleep for 30 seconds
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        // Send message with conversation history
        String aiResponse = sendMessageToGemini(userMessage, previousUserMessage, previousAiResponse);

        // Store conversation history in AiSession
        session.setAttribute("AiSession_UserMessage", userMessage);
        session.setAttribute("AiSession_AiResponse", aiResponse);

        // Send AI response back to the frontend
        JsonObject jsonResponse = Json.createObjectBuilder()
                .add("response", aiResponse)
                .build();

        try ( JsonWriter jsonWriter = Json.createWriter(out)) {
            jsonWriter.writeObject(jsonResponse);
        }
    }

    /**
     * Sends a message to the Gemini AI API and retrieves the response.
     *
     * @param message The user's input message to be sent to the AI.
     * @param previousUserMessage The previous message from the user.
     * @param previousAiResponse The previous response from the AI.
     * @return The AI's response as a String, or an error message if the request
     * fails.
     */
    private String sendMessageToGemini(String message, String previousUserMessage, String previousAiResponse) {
        try {
            // Create a URL object with the API endpoint
            URL url = new URL(GEMINI_API_URL);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("POST");
            conn.setRequestProperty("Content-Type", "application/json");
            conn.setDoOutput(true);

            // ‚úÖ Maintain conversation history using AiSession
            String jsonInputString = "{"
                    + "\"contents\": [{"
                    + "\"parts\": ["
                    + "{\"text\": \"" + SYSTEM_PROMPT + "\"},"
                    + "{\"text\": \"User: " + previousUserMessage + "\"},"
                    + "{\"text\": \"" + previousAiResponse + "\"},"
                    + "{\"text\": \"User: " + message + "\"}"
                    + "]"
                    + "}]"
                    + "}";

            try ( OutputStream os = conn.getOutputStream()) {
                byte[] input = jsonInputString.getBytes("utf-8");
                os.write(input, 0, input.length);
            }

            int responseCode = conn.getResponseCode();
            if (responseCode == HttpURLConnection.HTTP_OK) {
                try ( InputStream is = conn.getInputStream();  JsonReader reader = Json.createReader(is)) {
                    JsonObject jsonResponse = reader.readObject();
                    JsonArray candidates = jsonResponse.getJsonArray("candidates");

                    if (!candidates.isEmpty()) {
                        JsonObject firstCandidate = candidates.getJsonObject(0);
                        JsonObject content = firstCandidate.getJsonObject("content");
                        JsonArray parts = content.getJsonArray("parts");

                        if (!parts.isEmpty()) {
                            return parts.getJsonObject(0).getString("text");
                        }
                    }
                }
                return "No response from Gemini.";
            } else {
                return "Error: " + responseCode;
            }
        } catch (Exception e) {
            return "Exception: " + e.getMessage();
        }
    }

    // Main method for testing in the console
    public static void main(String[] args) {
        ChatAIController chatServlet = new ChatAIController();
        Scanner scanner = new Scanner(System.in);

        // Simulated AiSession storage
        String previousUserMessage = "";
        String previousAiResponse = "";

        while (true) {
            System.out.print("Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n (g√µ 'exit' ƒë·ªÉ tho√°t): ");
            String userMessage = scanner.nextLine();

            if (userMessage.equalsIgnoreCase("exit")) {
                System.out.println("Tho√°t ch∆∞∆°ng tr√¨nh chat.");
                break;
            }

            System.out.println("B·∫°n: " + userMessage);
            String response = chatServlet.sendMessageToGemini(userMessage, previousUserMessage, previousAiResponse);
            System.out.println("Gemini: " + response);

            // Update AiSession (simulated in console mode)
            previousUserMessage = userMessage;
            previousAiResponse = response;
        }
        scanner.close();
    }
}
